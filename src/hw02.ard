\import Data.Bool
\import Data.Or
\import hw01 (fac)
-- \import Logic
\import lect02

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func length {A : \Type} (l : List A) : Nat \elim l
  | nil => 0
  | cons a xs => suc (length xs)

\func sort {A : \Type} (less : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => \case xs \with {
    | nil => cons a nil
    | cons b xs => aux1 (length (cons a (cons b xs))) (cons a (cons b xs))
  }
  \where {
    \func aux1 (n : Nat) (l : List A) : List A \elim n
      | zero => l
      | suc n => aux1 n (aux2 (length l) l)
    \func aux2 (n : Nat) (l : List A) : List A \elim n
      | zero => l
      | suc n => \case l \with {
        | nil => nil
        | cons a xs => \case xs \with {
          | nil => cons a nil
          | cons b ys => if (less a b) (cons a (aux2 n (cons b ys))) (cons b (aux2 n (cons a ys)))
        }
      }
  }
-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x, y, z
  | false, _, _ => idp
  | true, false, _ => idp
  | true, true, false => idp
  | true, true, true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z)  \elim x, y, z
  | true, _, _ => idp
  | false, true, _ => idp
  | false, false, true => idp
  | false, false, false => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac-3-is-6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
-- \func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R => {?}

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

\func t4 {P Q R : \Type} (f : P -> Q -> R) (h : \Sigma P Q) : R => f h.1 h.2
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam (x : P 3) => h (3, x)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 {P Q : Nat -> \Type} (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) => (g.1, h g.1 g.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 {P Q : Nat -> \Type} (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty => \case h 3 \with {
  | inl a => \lam (p : P 3) (q : Q 3) => a p
  | inr b => \lam (p : P 3) (q : Q 3) => b q
}