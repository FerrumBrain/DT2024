\import Data.List
\import Paths
\import Paths.Meta
\open Nat(+,*)
\import lect03

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func testFileTest : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func testM5 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: x xs => pmap (x ::) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func ++nil {A : \Type} {xs : List A} : xs = xs ++ nil \elim xs
  | nil => idp
  | :: x xs => pmap (x ::) (++nil {_} {xs})

\func reverse++ {A : \Type} {xs ys : List A} : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs, ys
  | nil, nil => idp
  | :: x xs, nil => pmap (\lam a => a ++ x :: nil) reverse++
  | nil, :: y ys => ++nil
  | :: x xs, ys => trans (pmap (\lam a => a ++ x :: nil) reverse++) (++-assoc _ _ _)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | :: x xs => trans (reverse++ {_} {reverse xs} {x :: nil}) (pmap (x ::) (reverse-isInvolutive xs))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => trans
                  (trans
                        (trans
                              (pmap
                                   (\lam x => x + (m + k))
                                   (rdistr n m k))
                              (+-assoc (m * n) (k * n) (m + k)))
                        (pmap
                             (m * n +)
                             (trans (sym' (+-assoc (k * n) m k)) (pmap (\lam a => a + k) (+-comm (k * n) m)))))
                  (trans
                        (pmap
                            (m * n +)
                            (+-assoc m (k * n) k))
                        (sym' (+-assoc (m * n) m (k * n + k))))

\func zero* (x : Nat) : 0 * x = 0 \elim x
  | 0 => idp
  | suc x => zero* x


\func one* (x : Nat) : 1 * x = x \elim x
  | 0 => idp
  | suc x => pmap suc (one* x)

\func *-comm (x y : Nat) : x * y = y * x \elim x
  | 0 => zero* y
  | suc x => trans (rdistr y x 1) (trans (pmap (\lam a => a + 1 * y) (*-comm x y)) (pmap (y * x + ) (one* y)))

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k => trans (*-comm n (m + k)) (trans (rdistr n m k) (trans (pmap (m * n + ) (*-comm k n)) (pmap (\lam a => a + n * k) (*-comm m n))))

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  \let | g x => f x b
    | h' y => f a' y
  \in trans (pmap g p) (pmap h' q)

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b